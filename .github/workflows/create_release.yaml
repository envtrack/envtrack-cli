name: Build EnvTrack CLI

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # This ensures all tags are fetched
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.22
    - name: Run tidy
      run: go mod tidy
    - name: Run tests
      run: go test ./...
    - name: Build
      run: ./build.sh
    - name: Generate MD5 Checksums
      run: |
        cd dist
        md5sum * > checksums.md5
        cd ..
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: ${{ startsWith(github.ref, 'refs/tags/b-') }}
    - name: Upload Release Assets
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs').promises;
          const path = require('path');
          
          const release_id = '${{ steps.create_release.outputs.id }}';
          const dist_path = path.join(process.env.GITHUB_WORKSPACE, 'dist');
          
          const files = await fs.readdir(dist_path);
          
          for (const file of files) {
            const filePath = path.join(dist_path, file);
            const stats = await fs.stat(filePath);
            
            if (stats.isFile()) {
              await fs.chmod(filePath, '755');
              console.log(`Uploading ${file}...`);
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                name: file,
                data: await fs.readFile(filePath)
              });
            }
          }
  
  homebrew:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Update Homebrew Formula
      run: |
        chmod +x ./update-homebrew-formula.sh
        ./update-homebrew-formula.sh ${{ github.ref_name }} ${{ secrets.ENVTRACK_REPO_PERSONAL_TOKEN }} envtrack/homebrew-tap
  
  docker:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set version
      id: set_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]
        then
          VERSION=${GITHUB_REF#refs/tags/v}
        elif [[ $GITHUB_REF == refs/heads/* ]]
        then
          VERSION=$(echo ${GITHUB_SHA} | cut -c1-8)
        elif [[ $GITHUB_REF == refs/pull/* ]]
        then
          VERSION=pr-${{ github.event.number }}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: envtrack/envtrack-cli
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=long

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        build-args: |
          VERSION=${{ steps.set_version.outputs.VERSION }}
          COMMIT_HASH=${{ github.sha }}
          BUILD_TIME_UTC=$(date -u +"%Y-%m-%dT%H:%M:%SZ")